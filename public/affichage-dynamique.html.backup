<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Site du Collège de l'Estérel</title>
  <link rel="stylesheet" href="/css/responsive-page.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css" />
  <style>
    /* ... autres styles existants ... */

    /* Styles pour le bandeau défilant */
    .footer {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
    }

    .news-ticker {
      width: 100%;
      height: 40px;
      overflow: hidden;
      background-color: #333;
    }

    .news-ticker-content {
      height: 100%;
      display: flex;
      align-items: center;
      white-space: nowrap;
    }

    #ticker-text {
      display: inline-block;
      padding-left: 100%;
      color: white;
      font-size: 1.2em;
      animation: ticker 20s linear infinite;
    }

    @keyframes ticker {
      0% {
        transform: translateX(100%);
      }
      100% {
        transform: translateX(-100%);
      }
    }

    /* Ajustement pour éviter que le contenu soit caché derrière le bandeau */
    .main-content {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: calc(100vh - 200px);
      width: 100%;
      padding: 20px;
      box-sizing: border-box;
    }

    .ticker {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 10px 0;
      z-index: 1000;
      overflow: hidden;
    }

    .ticker-content {
      white-space: nowrap;
      position: relative;
      width: 100%;
    }

    #ticker-text {
      display: inline-block;
      white-space: nowrap;
      padding-left: 100%;  /* Commence hors écran à droite */
      animation: ticker var(--duration) linear infinite;
    }

    @keyframes ticker {
      0% {
        transform: translateX(0);  /* Commence à la position initiale (droite) */
      }
      100% {
        transform: translateX(-200%);  /* Va au-delà de la gauche */
      }
    }

    .ticker-text {
      display: inline-block;
      padding: 0 20px;
      animation: ticker var(--duration) linear infinite;
    }

    /* Ajout d'un second élément pour une transition fluide */
    .ticker-content::after {
      content: attr(data-text);
      position: absolute;
      white-space: nowrap;
      padding-left: 100%;
      left: 100%;
      top: 0;
    }

    @keyframes scroll {
        from {
            transform: translate3d(0, 0, 0);
        }
        to {
            transform: translate3d(-100%, 0, 0);
        }
    }

    .scrolling-text {
        display: inline-block;
        white-space: nowrap;
        padding-left: 100%;
        animation: scroll 60s linear infinite;
    }

    .news-banner {
        background-color: #f0f0f0;
        overflow: hidden;
        padding: 10px 0;
        width: 100%;
    }

    .slideshow-container {
        display: flex;
        justify-content: center;
        gap: 30px;
        width: calc(100% - 40px);
        height: calc(100vh - 270px);
        margin: 20px 20px;
        box-sizing: border-box;
    }

    .slideshow-section {
        width: calc((100vh - 270px) * 1.5);
        background: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
    }

    .media-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .slideshow-media {
        position: absolute;
        width: 100% !important;
        height: 100% !important;
        object-fit: contain;
        opacity: 0;
        transition: all 1.5s ease-in-out;
    }

    iframe.slideshow-media {
        width: 100% !important;
        height: 100% !important;
        border: none;
    }

    /* Styles pour les transitions */
    .slideshow-media.active {
        opacity: 1;
    }

    /* Ajustements responsifs */
    @media (min-width: 1400px) {
        .slideshow-container {
            width: 90%;
        }
    }

    @media (max-width: 1200px) {
        .slideshow-container {
            padding: 0 15px;
        }
    }

    @media (max-width: 768px) {
        .main-content {
            padding: 10px;
        }

        .slideshow-container {
            flex-direction: column;
            height: auto;
            padding: 0 10px;
        }

        .slideshow-section {
            flex: none;
            width: 100%;
            height: 45vh;
            margin: 10px 0;
        }
    }

    /* Style spécifique pour le bouton invisible */
    .hidden-back-button {
        position: fixed;
        top: 0;
        left: 0;
        width: 50px;
        height: 50px;
        background: transparent;
        border: none;
        cursor: pointer;
        z-index: 1000;
    }

    /* Aucun effet visuel au survol ou au clic */
    .hidden-back-button:hover,
    .hidden-back-button:active,
    .hidden-back-button:focus {
        outline: none;
        background: transparent;
    }

    /* Transition par fondu */
    .transition-fade {
        transition: opacity 1.5s ease-in-out;
    }
    
    /* Transition par glissement */
    .transition-slide {
        transform: translateX(100%);
        transition: transform 1.5s ease-in-out, opacity 1.5s ease-in-out;
    }
    
    /* Transition par zoom */
    .transition-zoom {
        transform: scale(0.5);
        transition: transform 1.5s ease-in-out, opacity 1.5s ease-in-out;
    }
    
    /* État actif pour toutes les transitions */
    .slideshow-media.active {
        opacity: 1;
    }
    
    .transition-slide.active {
        transform: translateX(0);
    }
    
    .transition-zoom.active {
        transform: scale(1);
    }

    /* Transition par spirale */
    .transition-spiral {
        transform: scale(0) rotate(0deg);
        transform-origin: center;
        transition: transform 1.5s cubic-bezier(0.175, 0.885, 0.32, 1.275), opacity 1.5s ease-in-out;
    }
    
    .transition-spiral.active {
        transform: scale(1) rotate(720deg);
        opacity: 1;
    }

    /* Ajouter des styles pour le texte sur les images */
    .text-overlay {
        position: absolute;
        width: 100%;
        padding: 15px;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        z-index: 10;
        opacity: 0;
        transition: opacity 1s ease-in-out;
    }
    
    .text-overlay.active {
        opacity: 1;
    }
    
    .text-overlay.top {
        top: 0;
    }
    
    .text-overlay.bottom {
        bottom: 0;
    }
    
    .text-overlay.center {
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0, 0, 0, 0.7);
    }
  </style>
</head>

<body>
  <button class="hidden-back-button"></button>
  
  <header class="header-banner">
    <div class="banner-container">
      <div class="banner-left">
        <h1 class="banner-title">Collège de l'Estérel</h1>
        <div class="banner-date">
          <script>
            const options = {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric",
            };
            document.write(new Date().toLocaleDateString("fr-FR", options));
          </script>
        </div>
        <div class="banner-time" id="current-time"></div>
      </div>

      <div class="banner-center">
        <div class="weather-container">
          <div class="weather-icon">
            <i class="wi"></i>
          </div>
          <div class="weather-info">
            <div class="weather-temp">
              <span class="temp-value"></span>
              <i class="wi wi-thermometer"></i>
            </div>
            <div class="weather-desc"></div>
            <div class="weather-details">
              <span class="humidity">
                <i class="wi wi-humidity"></i>
                <span class="humidity-value"></span>
              </span>
              <span class="wind">
                <i class="wi wi-strong-wind"></i>
                <span class="wind-value"></span>
              </span>
            </div>
          </div>
        </div>
      </div>

      <div class="banner-right">
        <a href="#" class="logo">
          <img src="/assets/img/logo-ministere-education.png" alt="Logo Education national" />
        </a>
        <a href="#" class="logo">
          <img src="/assets/img/Logo-saint-raphaël.png" alt="Logo Saint-Raphaël" />
        </a>
        <a href="#" class="logo">
          <img src="/assets/img/logo-departement.png" alt="Logo Departement" />
        </a>
      </div>
    </div>
  </header>

  <main class="main-content">
    <div class="slideshow-container">
        <!-- Diaporama Cuisine -->
        <div id="cuisine-section" class="slideshow-section">
            <div class="media-container">
                <img id="slideshow-image-cuisine" class="slideshow-media" style="display: none;" alt="Contenu cuisine">
                <iframe id="slideshow-document-cuisine" class="slideshow-media" style="display: none;"></iframe>
            </div>
            <div id="cuisine-text" class="text-overlay"></div>
        </div>

        <!-- Diaporama Direction -->
        <div id="direction-section" class="slideshow-section">
            <div class="media-container">
                <img id="slideshow-image-direction" class="slideshow-media" style="display: none;" alt="Contenu direction">
                <iframe id="slideshow-document-direction" class="slideshow-media" style="display: none;"></iframe>
            </div>
            <div id="direction-text" class="text-overlay"></div>
        </div>
    </div>
  </main>

  <div class="ticker">
    <div class="ticker-content">
        <span id="ticker-text"></span>
    </div>
  </div>

  <script>
    function updateTime() {
      const timeElement = document.getElementById("current-time");
      const now = new Date();
      timeElement.textContent = now.toLocaleTimeString("fr-FR", {
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      });
    }

    setInterval(updateTime, 1000);
    updateTime();

    const weatherIconMap = {
      "01d": "wi-day-sunny",
      "01n": "wi-night-clear",
      "02d": "wi-day-cloudy",
      "02n": "wi-night-alt-cloudy",
      "03d": "wi-cloud",
      "03n": "wi-cloud",
      "04d": "wi-cloudy",
      "04n": "wi-cloudy",
      "09d": "wi-day-showers",
      "09n": "wi-night-alt-showers",
      "10d": "wi-day-rain",
      "10n": "wi-night-alt-rain",
      "11d": "wi-day-thunderstorm",
      "11n": "wi-night-alt-thunderstorm",
      "13d": "wi-day-snow",
      "13n": "wi-night-alt-snow",
      "50d": "wi-day-fog",
      "50n": "wi-night-fog",
    };

    async function getWeather() {
      const apiKey = "c58762bad7036389cd0ca8dfc58bda59";
      const city = "Saint-Raphaël,FR";

      try {
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=fr`
        );
        const data = await response.json();

        const iconElement = document.querySelector(".weather-icon i");
        const tempElement = document.querySelector(".temp-value");
        const descElement = document.querySelector(".weather-desc");
        const humidityElement = document.querySelector(".humidity-value");
        const windElement = document.querySelector(".wind-value");

        iconElement.className = `wi ${weatherIconMap[data.weather[0].icon] || "wi-na"
          }`;

        tempElement.textContent = `${Math.round(data.main.temp)}°C`;
        descElement.textContent = data.weather[0].description;
        humidityElement.textContent = `${data.main.humidity}%`;
        windElement.textContent = `${Math.round(data.wind.speed * 3.6)} km/h`;
      } catch (error) {
        console.error("Erreur lors de la récupération de la météo:", error);
      }
    }

    getWeather();
    setInterval(getWeather, 30 * 60 * 1000);

    // Fonction pour initialiser le bandeau
    async function initNewsTicker() {
        try {
            const response = await fetch('/api/ticker-message');
            const data = await response.json();
            
            const tickerElement = document.getElementById('ticker-text');
            if (tickerElement && data.message) {
                tickerElement.textContent = data.message;
                tickerElement.style.setProperty('--duration', `${data.speed}s`);
            }
        } catch (error) {
            console.error("Erreur:", error);
        }
    }

    // Initialiser au chargement
    document.addEventListener('DOMContentLoaded', initNewsTicker);

    // Mettre à jour régulièrement
    setInterval(initNewsTicker, 1000);

    // Initialisation des variables globales
    let cuisineConfig = { medias: [] };
    let directionConfig = { medias: [] };
    let cuisineIndex = 0;
    let directionIndex = 0;
    let cuisineTimeout = null;
    let directionTimeout = null;

    // Fonction de chargement des configurations
    async function loadConfigurations() {
        try {
            console.log('Chargement des configurations...');
            const response = await fetch('/api/diaporama-config');
            const config = await response.json();
            console.log('Configurations reçues:', config);

            // Annuler les timeouts existants
            if (cuisineTimeout) clearTimeout(cuisineTimeout);
            if (directionTimeout) clearTimeout(directionTimeout);

            // Initialiser la section cuisine
            if (config.cuisine && config.cuisine.medias && config.cuisine.medias.length > 0) {
                cuisineConfig = config.cuisine;
                cuisineIndex = 0;
                console.log('Démarrage diaporama cuisine avec', cuisineConfig.medias.length, 'médias');
                showMedia('cuisine', cuisineConfig.medias[0]);
            } else {
                console.log('Aucun média trouvé pour la cuisine');
            }

            // Initialiser la section direction
            if (config.direction && config.direction.medias && config.direction.medias.length > 0) {
                directionConfig = config.direction;
                directionIndex = 0;
                console.log('Démarrage diaporama direction avec', directionConfig.medias.length, 'médias');
                showMedia('direction', directionConfig.medias[0]);
            } else {
                console.log('Aucun média trouvé pour la direction');
            }
        } catch (error) {
            console.error('Erreur lors du chargement des configurations:', error);
        }
    }

    function showMedia(section, media) {
        if (!media) {
            console.error(`Pas de média à afficher pour ${section}`);
            return;
        }

        // Annuler tout timeout existant
        if (section === 'cuisine' && cuisineTimeout) {
            clearTimeout(cuisineTimeout);
        } else if (section === 'direction' && directionTimeout) {
            clearTimeout(directionTimeout);
        }

        console.log(`Affichage du média pour ${section}:`, media);
        const imgElement = document.getElementById(`slideshow-image-${section}`);
        const iframeElement = document.getElementById(`slideshow-document-${section}`);
        
        // Récupérer l'ancien élément actif et le désactiver avec transition
        const oldActiveElement = document.querySelector(`#slideshow-image-${section}.active, #slideshow-document-${section}.active`);
        if (oldActiveElement) {
            oldActiveElement.classList.remove('active');
            oldActiveElement.style.opacity = '0';
        }

        const transition = media.transition || 'fade';
        
        if (media.type === 'document' && media.path.toLowerCase().endsWith('.pdf')) {
            // Gestion des PDFs
            iframeElement.classList.add(`transition-${transition}`);
            const viewerUrl = `/pdfjs/web/viewer.html?file=${encodeURIComponent(media.path)}`;
            iframeElement.src = viewerUrl;
            iframeElement.style.display = 'block';
            imgElement.style.display = 'none';
            
            setTimeout(() => {
                iframeElement.classList.add('active');
                iframeElement.style.opacity = '1';
            }, 50);
        } else {
            // Gestion des images
            imgElement.classList.add(`transition-${transition}`);
            imgElement.src = media.path;
            imgElement.style.display = 'block';
            iframeElement.style.display = 'none';
            
            setTimeout(() => {
                imgElement.classList.add('active');
                imgElement.style.opacity = '1';
            }, 50);
        }

        // Gérer le texte sur l'image si présent
        const textElement = document.getElementById(`${section}-text`);
        if (media.textOverlay && media.textOverlay.trim() !== '') {
            textElement.textContent = media.textOverlay;
            textElement.classList.add(media.textPosition || 'bottom', 'active');
        } else {
            textElement.textContent = '';
            textElement.classList.remove('active');
        }

        const duration = Math.max(5, media.duration || 5) * 1000;
        console.log(`Durée du média ${section}:`, duration/1000, 'secondes');
        
        const timeout = setTimeout(() => {
            if (section === 'cuisine') {
                cuisineIndex = (cuisineIndex + 1) % cuisineConfig.medias.length;
                console.log(`Passage au média cuisine suivant: ${cuisineIndex}/${cuisineConfig.medias.length}`);
                showMedia('cuisine', cuisineConfig.medias[cuisineIndex]);
            } else {
                directionIndex = (directionIndex + 1) % directionConfig.medias.length;
                console.log(`Passage au média direction suivant: ${directionIndex}/${directionConfig.medias.length}`);
                showMedia('direction', directionConfig.medias[directionIndex]);
            }
        }, duration);

        if (section === 'cuisine') {
            cuisineTimeout = timeout;
        } else {
            directionTimeout = timeout;
        }
    }

    // Initialisation au chargement de la page
    document.addEventListener('DOMContentLoaded', () => {
        console.log('Initialisation du diaporama...');
        loadConfigurations();
        // Recharger les configurations toutes les 30 secondes
        setInterval(loadConfigurations, 30000);
    });

    // Ajoutez cette fonction pour gérer le bandeau défilant
    async function updateTickerMessage() {
        try {
            const response = await fetch('/api/ticker-message');
            if (!response.ok) {
                throw new Error('Erreur lors de la récupération du message');
            }
            const data = await response.json();
            
            const tickerElement = document.getElementById('ticker-text');
            if (tickerElement && data.message) {
                tickerElement.textContent = data.message;
            }
        } catch (error) {
            console.error('Erreur lors de la mise à jour du bandeau:', error);
        }
    }

    // Mettre à jour le message toutes les 30 secondes
    setInterval(updateTickerMessage, 30000);

    // Charger le message initial
    document.addEventListener('DOMContentLoaded', updateTickerMessage);

    let currentIndex = 0; // Index de l'image actuelle
    let cuisineMedias = []; // Tableau pour stocker les médias

    async function initSlideshowCuisine() {
        // Supposons que vous avez déjà rempli cuisineMedias avec les chemins des images
        console.log('Médias cuisine combinés:', cuisineMedias);
        if (cuisineMedias.length > 0) {
            showNextMediaCuisine();
        }
    }

    function showNextMediaCuisine() {
        console.log('showNextMediaCuisine appelée, index actuel:', currentIndex);

        if (currentIndex < cuisineMedias.length) {
            const media = cuisineMedias[currentIndex];
            console.log('Affichage du média:', media);

            // Assurez-vous que l'élément img existe
            const imgElement = document.getElementById('media-display');
            imgElement.src = media.path; // Chemin de l'image
            imgElement.alt = media.name; // Nom de l'image

            currentIndex++;
            setTimeout(showNextMediaCuisine, media.duration * 1000); // Appel après la durée du média
        } else {
            console.log('Fin des médias cuisine');
            currentIndex = 0; // Réinitialiser l'index si nécessaire
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Stocker la page actuelle dans l'historique
        const currentPage = window.location.pathname;
        if (!sessionStorage.getItem('lastPage')) {
            sessionStorage.setItem('lastPage', document.referrer || '/');
        }

        // Gérer le clic sur le bouton retour
        document.querySelector('.hidden-back-button').addEventListener('click', () => {
            const lastPage = sessionStorage.getItem('lastPage');
            if (lastPage && lastPage !== '') {
                window.location.href = lastPage;
            } else {
                window.location.href = '/'; // Page par défaut si pas d'historique
            }
            sessionStorage.removeItem('lastPage'); // Nettoyer après utilisation
        });

        // Stocker la page actuelle pour le prochain retour
        window.addEventListener('beforeunload', () => {
            sessionStorage.setItem('lastPage', currentPage);
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelector('.hidden-back-button').addEventListener('click', () => {
            window.history.back();
        });
    });
  </script>
</body>

</html>